Профилирование памяти

1) jps + jmap -histo <pid>

Вывод команды содержит список всех типов объектов, которые находятся в куче Java,
а также количество экземпляров каждого типа объекта и общий объем памяти, занимаемый этими объектами.

На вход было создано 5 000 000 заявок Item
После анализа instances выдал 30 477 655 экземпляров объектов, которые были созданы в куче Java для каждого типа объекта:
LocalDateTime
LocalDate
LocalTime и другие
Их размер/ затраченный объем памяти составил 969 мб

2) jps + jstat

Эта информация может быть полезна для определения, какие поколения занимают больше всего памяти
и как часто происходят сборки мусора в вашем приложении.

S0C - размер первого (Survivor) поколения в байтах - 0
- S1C - размер второго (Survivor) поколения в байтах - 24576
- S0U - используемый объем памяти в первом (Survivor) поколении в байтах - 0
- S1U - используемый объем памяти во втором (Survivor) поколении в байтах -24576
- EC - размер поколения Eden в байтах -208 896
- EU - используемый объем памяти в поколении Eden в байтах- 145 408
- OC - размер поколения Old в байтах - 1 896448
- OU - используемый объем памяти в поколении Old в байтах - 796 672
- PC - размер PermGen (если используется) в байтах - 1472
- PU - используемый объем памяти в PermGen (если используется) в байтах - 1333
- YGC - количество сборок мусора в поколении Young - 13
- YGCT - время, затраченное на сборки мусора в поколении Young - 0.445
- FGC - количество сборок мусора в поколении Old - 0
- FGCT - время, затраченное на сборки мусора в поколении Old -0
- GCT - общее время, затраченное на сборки мусора - 0,445

Мы видим, что большинство памяти занимают OLD объекты (OC)
Молодые объекты быстро создаются и быстро умирают (YGCT)
Пока не переполнен old generation, происходят чистки молодых объектов (YGC).
Видно, что удалились только молодые объекты(YGC, GCT)


3) jconsole

Графики в JConsole отображают различные метрики, связанные с использованием памяти,
производительностью и другими характеристиками вашего приложения.

При ключах -Xmx40m -Xms20m -XX:+UseParallelGC
Было создано 50 000 объектов
Heap заполнился до 9 мб, потом запустилась крупная сборка, которая подчистила память до 4 мб.
Крупные сборки запускались 4 раза
Общее время программы 8 мин
Использовано памяти 65 мг


